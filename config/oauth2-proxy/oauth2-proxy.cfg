email_domains=[ "*" ]
cookie_name="_oauth2_proxy"
cookie_secure="false"
cookie_refresh="4m"
cookie_expire="24h"
cookie_samesite="lax"
cookie_secret="QQINaROuhtE9TcZkMAn-6Zs2Pv3xaWytBmc5W7sPX7w=" #gitleaks:allow
ssl_insecure_skip_verify="true"
skip_provider_button="true"
reverse_proxy="true"
skip_auth_preflight="true"
skip_jwt_bearer_tokens="true"

# The csrf cookie exists when you begin the login flow, but if you sit there
# at the login page longer than this time, you'll get a forbidden page. Having
# a long expiration for the local environment makes this page less likely to
# occur.
# https://github.com/oauth2-proxy/oauth2-proxy/issues/817
cookie_csrf_expire="10m"

# If multiple requests occur simultaneously or if you were to attempt to go to
# the console page from a single browser session in multiple tabs before
# actually logging in, you will probably get a 403 or a 500 and the oauth2-proxy
# logs will say "The specified 'code_verifier' is invalid." This fixes that
# issue.
# https://github.com/oauth2-proxy/oauth2-proxy/pull/1708
cookie_csrf_per_request="true"

# Cookie domains to force cookies to (e.g. .yourcompany.com). The longest
# domain matching the request's host will be used (or the shortest cookie
# domain if there is no match).
# Note:
# Port matters for oauth2-proxy even if it doesn't for the browser, you might
# still see warnings for "invalid Cookie.Domain...dropping domain attribute"
cookie_domains=[ "localhost", "idp.localhost" ]

# By default, only empty ports are allowed. This translates to allowing the
# default port of the URL's protocol (80 for HTTP, 443 for HTTPS, etc.) since
# browsers omit them. To allow only a specific port, add it to the whitelisted
# domain: example.com:8080. To allow any port, use *: example.com:*.
# https://oauth2-proxy.github.io/oauth2-proxy/docs/configuration/overview/#footnote2
whitelist_domains=[ "localhost", "idp.localhost" ]

# Cookie sizes get too large when refresh tokens are included with oauth2-proxy
# sessions, and oauth2-proxy has to split the cookies. Overall these cookies
# can add up to be more than 6.5 KiB. This also means the revese proxy buffers
# need to be increased by a considerable amount. By using redis, this problem
# is avoided.
# https://oauth2-proxy.github.io/oauth2-proxy/docs/configuration/session_storage#redis-storage
session_store_type="redis"
redis_connection_url="redis://oauth2-proxy-redis"
